{"version":3,"sources":["components/header/Header.js","components/searchbar/SearchBar.js","components/track/Track.js","components/tracklist/TrackList.js","components/searchresults/SearchResults.js","components/playlist/Playlist.js","utils/SpotifyAPI.js","utils/FakeAPI.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","createElement","className","SearchBar","props","_useState","useState","_useState2","_slicedToArray","song","setSong","_useState3","_useState4","artist","setArtist","_useState5","_useState6","album","setAlbum","onSubmit","event","preventDefault","searchFunction","type","placeholder","value","onChange","_ref","target","_ref2","_ref3","Track","actionName","trackPrefix","context","trackIndex","trackInfo","name","onClick","action","TrackList","trackComponents","tracks","map","track","key","id","SearchResults","results","addFunction","Playlist","saveButton","playlist","length","playlistName","disabled","title","saveFunction","updatePlaylistName","removeFunction","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","corsPrefix","spotifyApiUrl","accessToken","SpotifyAPI","login","loginUrl","spotifyLoginUrl","encodeURIComponent","window","location","expireConnection","alert","getAccessToken","accessTokenHash","hash","match","expiresInHash","expiresIn","Number","setTimeout","history","pushState","getRequestHeaders","accept","Authorization","searchSongs","_searchSongs","_asyncToGenerator","_callee","params","fetchUrl","fetchSettings","response","jsonResponse","_context","concat","headers","fetch","ok","json","items","artists","uri","t0","console","log","_x","_x2","_x3","apply","arguments","getUserID","_getUserID","_callee2","userId","_context2","createPlaylist","_createPlaylist","_callee3","endpointUrl","playlistId","_context3","body","JSON","stringify","description","_x4","_x5","addPlaylistTracks","_addPlaylistTracks","_callee4","_context4","uris","snapshot_id","_x6","_x7","savePlaylist","_savePlaylist","_callee5","_context5","_x8","_x9","sampleData","genre","App","appContent","fakeAPI","setFakeAPI","searchResults","setSearchResults","setPlaylistName","_useState7","_useState8","playlistTracks","setPlaylistTracks","trackToAdd","find","prevPlaylistTracks","_toConsumableArray","newName","trackToRemove","filter","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c0b27a2c.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n    return (\n        <header className=\"App-Header\">\n            <h1>Ja<span className=\"mmm\">mmm</span>ing</h1>\n            <h2>A Spotify playlist creator using React</h2>\n        </header>\n    );\n}\n\nexport default Header;","import React, {useState} from 'react';\nimport './SearchBar.css';\n\nfunction SearchBar(props) {\n    const [song, setSong] = useState('');\n    const handleInputChangeSong = ({target}) => { setSong(target.value); };\n\n    const [artist, setArtist] = useState('');\n    const handleInputChangeArtist = ({target}) => { setArtist(target.value); };\n\n    const [album, setAlbum] = useState('');\n    const handleInputChangeAlbum = ({target}) => { setAlbum(target.value); };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        props.searchFunction(song, artist, album);\n    }\n\n    return (\n        <div className=\"SearchBar\">\n            <form onSubmit={handleSubmit}>\n                <h3>Search for songs...</h3>\n                <div>\n                    <input type=\"text\" placeholder=\"Song\" value={song} onChange={handleInputChangeSong} />\n                    <input type=\"text\" placeholder=\"Artist\" value={artist} onChange={handleInputChangeArtist} />\n                    <input type=\"text\" placeholder=\"Album\" value={album} onChange={handleInputChangeAlbum} />\n                </div>\n                \n                <button className=\"standard\" type=\"submit\">Search</button>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nfunction Track(props) {\n    let actionName;\n    let trackPrefix;\n    if (props.context === 'playlist') {\n        actionName = '-';\n        trackPrefix = props.trackIndex + \". \";\n    } else {\n        actionName = '+';\n        trackPrefix = '';\n    }\n    const handleAction = () => props.action(props.trackInfo);\n    \n    return (\n        <li className=\"Track\">\n            <div className=\"TrackDetails\">\n                <div className=\"TrackTitle\">\n                    {trackPrefix + props.trackInfo.name}\n                </div>\n                <div className=\"TrackSubtitle\">\n                    <span className=\"Artist\">{props.trackInfo.artist}</span>\n                    <span className=\"Album\">{props.trackInfo.album}</span>\n                </div>\n            </div>\n            <button className=\"subtle\" onClick={handleAction}>{actionName}</button>\n        </li>\n    );\n}\n\nexport default Track;","import React from 'react';\nimport Track from '../track/Track';\n\nimport './TrackList.css';\n\nfunction TrackList(props) {\n    let trackComponents = props.tracks.map((track, trackIndex) => {\n            return <Track \n                key={track.id} \n                context={props.context} \n                trackInfo={track} \n                trackIndex={trackIndex + 1} \n                action={props.action} \n            />;\n        }\n    );\n    \n    return (\n        <ul className=\"TrackList\">\n            {trackComponents}\n        </ul>\n    );\n}\n\nexport default TrackList;","import React from 'react';\nimport TrackList from '../tracklist/TrackList';\n\nimport './SearchResults.css';\n\nfunction SearchResults(props) {\n    return (\n        <div className=\"SearchResults TrackListContainer\">\n            <TrackList tracks={props.results} context=\"search\" action={props.addFunction} />\n        </div>\n    );\n}\n\nexport default SearchResults;","import React from 'react';\nimport TrackList from '../tracklist/TrackList';\n\nimport './Playlist.css';\n\nfunction Playlist(props) {\n    const onChangePlaylistName = ({target}) => { props.updatePlaylistName(target.value); }\n    \n    let enableSaveButton = props.playlist.length !== 0 && props.playlistName;\n    let saveButton = enableSaveButton ? \n        (<button className=\"standard\" type=\"submit\">Save to Spotify</button>) :\n        (<button className=\"standard\" type=\"submit\" disabled=\"disabled\" title=\"Playlist needs a name and at least 1 song.\">Save to Spotify</button>);\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        props.saveFunction();\n    } \n\n    return (\n        <div className=\"Playlist\">\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" placeholder=\"Playlist Name\" value={props.playlistName} onChange={onChangePlaylistName} />\n                {saveButton}\n            </form>\n            <div className=\"TrackListContainer\">\n                <TrackList tracks={props.playlist} context=\"playlist\" action={props.removeFunction} />\n            </div>\n        </div>\n    );\n}\n\nexport default Playlist;","const devMode = true;\nconst redirectUri = (devMode ? 'http://localhost:3000/' : 'https://mrbigschot.github.io/Jammming/');\nconst corsPrefix = (devMode ? 'https://cors-anywhere.herokuapp.com/' : '');\nconst clientID = '91bf79d84fff4ec0b9960048ab233286';\nconst spotifyLoginUrl = 'https://accounts.spotify.com';\nconst spotifyApiUrl = 'https://api.spotify.com/v1';\n\nlet accessToken = null;\n\nconst SpotifyAPI = {\n    login() {\n        var loginUrl = spotifyLoginUrl + '/authorize';\n        loginUrl += '?response_type=token';\n        loginUrl += '&client_id=' + encodeURIComponent(clientID);\n        loginUrl += '&scope=' + encodeURIComponent(\"playlist-modify-public\");\n        loginUrl += '&redirect_uri=' + encodeURIComponent(redirectUri);\n        window.location = loginUrl;\n    },\n\n    expireConnection() {\n        alert('Connection to Spotify is about to expire!');\n        accessToken = null;\n        window.location = redirectUri;\n    },\n\n    getAccessToken() {\n        if (accessToken) return accessToken;\n\n        const accessTokenHash = window.location.hash.match(/access_token=([^&]*)/);\n        const expiresInHash = window.location.hash.match(/expires_in=([^&]*)/);\n\n        if (accessTokenHash && expiresInHash) {\n          accessToken = accessTokenHash[1];\n          const expiresIn = Number(expiresInHash[1]);\n          window.setTimeout(SpotifyAPI.expireConnection, expiresIn * 1000);\n          window.history.pushState('Access Token', null, '/'); // stomp on the parameter-containing url from the history\n          return accessToken;\n        }\n    },\n\n    getRequestHeaders() {\n        return {\n            'accept': 'application/json',\n            'Authorization': 'Bearer ' + accessToken\n        };\n    },\n\n    async searchSongs(song, artist, album) {\n        if (SpotifyAPI.getAccessToken()) {\n            let endpointUrl = \"/search\";\n            let params = \"?type=track&q=\";\n            if (song) {\n                params += `track:${song}%20`;\n            }\n            if (artist) {\n                params += `artist:${artist}%20`;\n            }\n            if (album) {\n                params += `album:${album}%20`;\n            }\n            let fetchUrl = corsPrefix + spotifyApiUrl + endpointUrl + params;\n            let fetchSettings = {\n                method: 'GET',\n                headers: SpotifyAPI.getRequestHeaders()\n            };\n        \n            try {\n                let response = await fetch(fetchUrl, fetchSettings);\n                if (response.ok) {\n                    let jsonResponse = await response.json();\n                    let tracks = jsonResponse.tracks;\n                    let results = tracks.items.map((track) => {\n                        return {\n                            id: track.id,\n                            name: track.name,\n                            artist: track.artists[0].name,\n                            album: track.album.name,\n                            uri: track.uri\n                        }\n                    });\n                    return results;\n                }\n                throw new Error('Request failed!');\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    },\n\n    async getUserID() {\n        if (SpotifyAPI.getAccessToken()) {\n            let endpointUrl = \"/me\";\n            let fetchUrl = corsPrefix + spotifyApiUrl + endpointUrl;\n            let fetchSettings = {\n                method: 'GET',\n                headers: SpotifyAPI.getRequestHeaders()\n            };\n        \n            try {\n                let response = await fetch(fetchUrl, fetchSettings);\n                if (response.ok) {\n                    let jsonResponse = await response.json();\n                    let userId = jsonResponse.id;\n                    return userId;\n                }\n                throw new Error('Request failed!');\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    },\n\n    async createPlaylist(userId, playlistName) {\n        if (SpotifyAPI.getAccessToken()) {\n            let endpointUrl = `/users/${userId}/playlists`;\n            let fetchUrl = corsPrefix + spotifyApiUrl + endpointUrl;\n            let fetchSettings = {\n                method: 'POST',\n                headers: SpotifyAPI.getRequestHeaders(),\n                body: JSON.stringify({\n                    \"name\": playlistName,\n                    \"description\": \"Created using the Jammming app\"\n                })\n            };\n        \n            try {\n                let response = await fetch(fetchUrl, fetchSettings);\n                if (response.ok) {\n                    let jsonResponse = await response.json();\n                    let playlistId = jsonResponse.id;\n                    return playlistId;\n                }\n                throw new Error('Request failed!');\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    },\n\n    async addPlaylistTracks(playlistId, tracks) {\n        if (SpotifyAPI.getAccessToken()) {\n            let endpointUrl = `/playlists/${playlistId}/tracks`;\n            let fetchUrl = corsPrefix + spotifyApiUrl + endpointUrl;\n            let fetchSettings = {\n                method: 'POST',\n                headers: SpotifyAPI.getRequestHeaders(),\n                body: JSON.stringify({\n                    \"uris\": tracks.map((track => track.uri))\n                })\n            };\n        \n            try {\n                let response = await fetch(fetchUrl, fetchSettings);\n                if (response.ok) {\n                    let jsonResponse = await response.json();\n                    return jsonResponse.snapshot_id;\n                }\n                throw new Error('Request failed!');\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    },\n\n    async savePlaylist(playlistName, tracks) {\n        let userId = await SpotifyAPI.getUserID();\n        let playlistId = await SpotifyAPI.createPlaylist(userId, playlistName);\n        return await SpotifyAPI.addPlaylistTracks(playlistId, tracks);\n    }\n};\n\nexport default SpotifyAPI;","const sampleData = [\n    {\n        id: 1,\n        name: \"Superstition\",\n        artist: \"Stevie Wonder\",\n        album: \"Hotter Than July\",\n        genre: \"R&B\",\n        uri: 'uri1'\n    },\n    {\n        name: \"Higher Ground\",\n        artist: \"Stevie Wonder\",\n        album: \"Innervisions\",\n        genre: \"R&B\",\n        id: 2,\n        uri: 'uri2'\n    },\n    {\n        name: \"In the Stone\",\n        artist: \"Earth, Wind & Fire\",\n        album: \"I Am\",\n        genre: \"R&B\",\n        id: 3,\n        uri: 'uri3'\n    },\n    {\n        name: \"That's The Way of the World\",\n        artist: \"Earth, Wind & Fire\",\n        album: \"That's The Way of the World\",\n        genre: \"R&B\",\n        id: 4,\n        uri: 'uri4'\n    },\n    {\n        name: \"Click Bait (feat. The Hornheads)\",\n        artist: \"Cory Wong\",\n        album: \"The Striped Album\",\n        genre: \"R&B\",\n        id: 5,\n        uri: 'uri5'\n    },\n    {\n        name: \"Long Train Runnin'\",\n        artist: \"The Doobie Brothers\",\n        album: \"Live at the Wolf Trap\",\n        genre: \"Rock\",\n        id: 6,\n        uri: 'uri6'\n    },\n    {\n        name: \"The Chicken (Soul Intro)\",\n        artist: \"Jaco Pastorius\",\n        album: \"The Birthday Concert\",\n        genre: \"Jazz\",\n        id: 7,\n        uri: 'uri7'\n    }\n];\n\nexport default sampleData;","import React, { useState } from 'react';\n\n// Styling\nimport './App.css';\n\n// React components\nimport Header from './components/header/Header';\nimport SearchBar from './components/searchbar/SearchBar';\nimport SearchResults from './components/searchresults/SearchResults';\nimport Playlist from './components/playlist/Playlist';\n\n// Utilities\nimport SpotifyAPI from './utils/SpotifyAPI';\nimport sampleData from './utils/FakeAPI';\n\nfunction App() {\n    // states\n    const [fakeAPI, setFakeAPI] = useState(false); \n    const [searchResults, setSearchResults] = useState([]);\n    const [playlistName, setPlaylistName]= useState('');\n    const [playlistTracks, setPlaylistTracks] = useState([]);\n    \n    const useFakeAPI = () => { setFakeAPI(true); }\n\n    // other component functions\n    const updatePlaylistName = (newName) => {\n        setPlaylistName(newName);\n    }\n    const addToPlaylist = (trackToAdd) => {\n        if (playlistTracks.length < 100 && !playlistTracks.find(track => track.id === trackToAdd.id)) {\n            setPlaylistTracks((prevPlaylistTracks) => {\n                return [...prevPlaylistTracks, trackToAdd];\n            });\n        }\n    }\n    const removeFromPlaylist = (trackToRemove) => {\n        if (playlistTracks.find(track => track.id === trackToRemove.id)) {\n            setPlaylistTracks((prevPlaylistTracks) => {\n                return prevPlaylistTracks.filter(track => track.id !== trackToRemove.id);\n            });\n        }\n    }\n\n    // Spotify API wrapper functions\n    const search = (song, artist, album) => {\n        if (song || artist || album) {\n            if (fakeAPI) {\n                setSearchResults(sampleData);\n            } else {\n                SpotifyAPI.searchSongs(song, artist, album)\n                    .then((results) => { setSearchResults(results) });\n            }\n        } else {\n            setSearchResults([]);\n        }\n    }\n    const savePlaylistToSpotify = () => {\n        if (fakeAPI) {\n            setPlaylistName('');\n            setPlaylistTracks([]);\n        } else {\n            SpotifyAPI.savePlaylist(playlistName, playlistTracks)\n                .then(() => {\n                    setPlaylistName('');\n                    setPlaylistTracks([]);\n                });\n        }\n    }\n\n    // component logic\n    let appContent;\n    if (SpotifyAPI.getAccessToken() || fakeAPI) {\n        appContent = (\n            <div className=\"App-content\">\n                <div className=\"App-content-section\">\n                    <SearchBar \n                        searchFunction={search}\n                    />\n                    <SearchResults\n                        results={searchResults}\n                        addFunction={addToPlaylist}\n                    />\n                </div>\n                <div className=\"App-content-section\">\n                    <Playlist \n                        playlistName={playlistName} updatePlaylistName={updatePlaylistName} \n                        playlist={playlistTracks} removeFunction={removeFromPlaylist}\n                        saveFunction={savePlaylistToSpotify}\n                    />\n                </div>\n            </div>\n        );\n    } else {\n        appContent = (\n            <div className=\"App-content\">\n                <div className=\"App-content-section Startup\">\n                    <button className=\"standard\" onClick={SpotifyAPI.login}>Connect to Spotify</button>\n                    <button className=\"standard\" onClick={useFakeAPI}>Use Sample Data</button>\n                </div>\n            </div>\n        );\n    }\n        \n    return (\n        <div className=\"App\">\n            <div className=\"App-background\" />\n            <Header />\n            <div className=\"App-content-wrapper\">\n                {appContent}\n            </div>\n        </div>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}